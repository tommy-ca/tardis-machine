// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file lakehouse/silver/v1/records.proto (package lakehouse.silver.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file lakehouse/silver/v1/records.proto.
 */
export const file_lakehouse_silver_v1_records: GenFile = /*@__PURE__*/
  fileDesc("CiFsYWtlaG91c2Uvc2lsdmVyL3YxL3JlY29yZHMucHJvdG8SE2xha2Vob3VzZS5zaWx2ZXIudjEiqAIKC1RyYWRlUmVjb3JkEhAKCGV4Y2hhbmdlGAEgASgJEg4KBnN5bWJvbBgCIAEoCRIsCghldmVudF90cxgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLQoJaW5nZXN0X3RzGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIQCgh0cmFkZV9pZBgFIAEoCRInCgRzaWRlGAYgASgOMhkubGFrZWhvdXNlLnNpbHZlci52MS5TaWRlEhAKCHByaWNlX2U4GAcgASgDEg4KBnF0eV9lOBgIIAEoAxIQCghzZXF1ZW5jZRgJIAEoAxIrCgZvcmlnaW4YCiABKA4yGy5sYWtlaG91c2Uuc2lsdmVyLnYxLk9yaWdpbiLXAgoQQm9va0NoYW5nZVJlY29yZBIQCghleGNoYW5nZRgBIAEoCRIOCgZzeW1ib2wYAiABKAkSLAoIZXZlbnRfdHMYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi0KCWluZ2VzdF90cxgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASJwoEc2lkZRgFIAEoDjIZLmxha2Vob3VzZS5zaWx2ZXIudjEuU2lkZRIrCgZhY3Rpb24YBiABKA4yGy5sYWtlaG91c2Uuc2lsdmVyLnYxLkFjdGlvbhIQCghwcmljZV9lOBgHIAEoAxIOCgZxdHlfZTgYCCABKAMSDQoFbGV2ZWwYCSABKAUSEAoIc2VxdWVuY2UYCiABKAMSKwoGb3JpZ2luGAsgASgOMhsubGFrZWhvdXNlLnNpbHZlci52MS5PcmlnaW4izAMKEkJvb2tTbmFwc2hvdFJlY29yZBIQCghleGNoYW5nZRgBIAEoCRIOCgZzeW1ib2wYAiABKAkSLAoIZXZlbnRfdHMYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi0KCWluZ2VzdF90cxgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDQoFZGVwdGgYBSABKA0SOwoEYmlkcxgGIAMoCzItLmxha2Vob3VzZS5zaWx2ZXIudjEuQm9va1NuYXBzaG90UmVjb3JkLkxldmVsEjsKBGFza3MYByADKAsyLS5sYWtlaG91c2Uuc2lsdmVyLnYxLkJvb2tTbmFwc2hvdFJlY29yZC5MZXZlbBIQCghncm91cGluZxgIIAEoDRITCgtpbnRlcnZhbF9tcxgJIAEoDRIdChVyZW1vdmVfY3Jvc3NlZF9sZXZlbHMYCiABKAgSEAoIc2VxdWVuY2UYCyABKAMSKwoGb3JpZ2luGAwgASgOMhsubGFrZWhvdXNlLnNpbHZlci52MS5PcmlnaW4aKQoFTGV2ZWwSEAoIcHJpY2VfZTgYASABKAMSDgoGcXR5X2U4GAIgASgDIuEDChlHcm91cGVkQm9va1NuYXBzaG90UmVjb3JkEhAKCGV4Y2hhbmdlGAEgASgJEg4KBnN5bWJvbBgCIAEoCRIsCghldmVudF90cxgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLQoJaW5nZXN0X3RzGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBINCgVkZXB0aBgFIAEoDRJCCgRiaWRzGAYgAygLMjQubGFrZWhvdXNlLnNpbHZlci52MS5Hcm91cGVkQm9va1NuYXBzaG90UmVjb3JkLkxldmVsEkIKBGFza3MYByADKAsyNC5sYWtlaG91c2Uuc2lsdmVyLnYxLkdyb3VwZWRCb29rU25hcHNob3RSZWNvcmQuTGV2ZWwSEAoIZ3JvdXBpbmcYCCABKA0SEwoLaW50ZXJ2YWxfbXMYCSABKA0SHQoVcmVtb3ZlX2Nyb3NzZWRfbGV2ZWxzGAogASgIEhAKCHNlcXVlbmNlGAsgASgDEisKBm9yaWdpbhgMIAEoDjIbLmxha2Vob3VzZS5zaWx2ZXIudjEuT3JpZ2luGikKBUxldmVsEhAKCHByaWNlX2U4GAEgASgDEg4KBnF0eV9lOBgCIAEoAyKnAwoOVHJhZGVCYXJSZWNvcmQSEAoIZXhjaGFuZ2UYASABKAkSDgoGc3ltYm9sGAIgASgJEiwKCGV2ZW50X3RzGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIqCgZlbmRfdHMYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi0KCWluZ2VzdF90cxgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASKgoEa2luZBgGIAEoDjIcLmxha2Vob3VzZS5zaWx2ZXIudjEuQmFyS2luZBIQCghpbnRlcnZhbBgHIAEoBBITCgtpbnRlcnZhbF9tcxgIIAEoDRIPCgdvcGVuX2U4GAkgASgDEg8KB2hpZ2hfZTgYCiABKAMSDgoGbG93X2U4GAsgASgDEhAKCGNsb3NlX2U4GAwgASgDEhEKCXZvbHVtZV9lOBgNIAEoAxITCgt0cmFkZV9jb3VudBgOIAEoBBIrCgZvcmlnaW4YDyABKA4yGy5sYWtlaG91c2Uuc2lsdmVyLnYxLk9yaWdpbiKNAgoLUXVvdGVSZWNvcmQSEAoIZXhjaGFuZ2UYASABKAkSDgoGc3ltYm9sGAIgASgJEiwKCGV2ZW50X3RzGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBItCglpbmdlc3RfdHMYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhQKDGJpZF9wcmljZV9lOBgFIAEoAxISCgpiaWRfcXR5X2U4GAYgASgDEhQKDGFza19wcmljZV9lOBgHIAEoAxISCgphc2tfcXR5X2U4GAggASgDEisKBm9yaWdpbhgJIAEoDjIbLmxha2Vob3VzZS5zaWx2ZXIudjEuT3JpZ2luIowCChZEZXJpdmF0aXZlVGlja2VyUmVjb3JkEhAKCGV4Y2hhbmdlGAEgASgJEg4KBnN5bWJvbBgCIAEoCRIsCghldmVudF90cxgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLQoJaW5nZXN0X3RzGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIVCg1tYXJrX3ByaWNlX2U4GAUgASgDEhYKDmluZGV4X3ByaWNlX2U4GAYgASgDEhcKD2Z1bmRpbmdfcmF0ZV9lORgHIAEoAxIrCgZvcmlnaW4YCCABKA4yGy5sYWtlaG91c2Uuc2lsdmVyLnYxLk9yaWdpbiKcAgoRTGlxdWlkYXRpb25SZWNvcmQSEAoIZXhjaGFuZ2UYASABKAkSDgoGc3ltYm9sGAIgASgJEiwKCGV2ZW50X3RzGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBItCglpbmdlc3RfdHMYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEicKBHNpZGUYBSABKA4yGS5sYWtlaG91c2Uuc2lsdmVyLnYxLlNpZGUSEAoIcHJpY2VfZTgYBiABKAMSDgoGcXR5X2U4GAcgASgDEhAKCG9yZGVyX2lkGAggASgJEisKBm9yaWdpbhgJIAEoDjIbLmxha2Vob3VzZS5zaWx2ZXIudjEuT3JpZ2luIqMCChNPcHRpb25TdW1tYXJ5UmVjb3JkEhAKCGV4Y2hhbmdlGAEgASgJEg4KBnN5bWJvbBgCIAEoCRIsCghldmVudF90cxgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLQoJaW5nZXN0X3RzGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBINCgVpdl9lNhgFIAEoAxIQCghkZWx0YV9lORgGIAEoAxIQCghnYW1tYV9lORgHIAEoAxIQCgh0aGV0YV9lORgIIAEoAxIPCgd2ZWdhX2U5GAkgASgDEgoKAm9pGAogASgDEisKBm9yaWdpbhgLIAEoDjIbLmxha2Vob3VzZS5zaWx2ZXIudjEuT3JpZ2luIqYCChBCb29rVGlja2VyUmVjb3JkEhAKCGV4Y2hhbmdlGAEgASgJEg4KBnN5bWJvbBgCIAEoCRIsCghldmVudF90cxgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLQoJaW5nZXN0X3RzGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIZChFiZXN0X2JpZF9wcmljZV9lOBgFIAEoAxIXCg9iZXN0X2JpZF9xdHlfZTgYBiABKAMSGQoRYmVzdF9hc2tfcHJpY2VfZTgYByABKAMSFwoPYmVzdF9hc2tfcXR5X2U4GAggASgDEisKBm9yaWdpbhgJIAEoDjIbLmxha2Vob3VzZS5zaWx2ZXIudjEuT3JpZ2luKjkKBFNpZGUSFAoQU0lERV9VTlNQRUNJRklFRBAAEgwKCFNJREVfQlVZEAESDQoJU0lERV9TRUxMEAIqRgoGQWN0aW9uEhYKEkFDVElPTl9VTlNQRUNJRklFRBAAEhEKDUFDVElPTl9VUFNFUlQQARIRCg1BQ1RJT05fREVMRVRFEAIqXgoHQmFyS2luZBIYChRCQVJfS0lORF9VTlNQRUNJRklFRBAAEhEKDUJBUl9LSU5EX1RJQ0sQARIRCg1CQVJfS0lORF9USU1FEAISEwoPQkFSX0tJTkRfVk9MVU1FEAMqXAoGT3JpZ2luEhYKEk9SSUdJTl9VTlNQRUNJRklFRBAAEhMKD09SSUdJTl9SRUFMVElNRRABEhEKDU9SSUdJTl9SRVBMQVkQAhISCg5PUklHSU5fQVJDSElWRRADYgZwcm90bzM", [file_google_protobuf_timestamp]);

/**
 * Trades (curated)
 *
 * @generated from message lakehouse.silver.v1.TradeRecord
 */
export type TradeRecord = Message<"lakehouse.silver.v1.TradeRecord"> & {
  /**
   * @generated from field: string exchange = 1;
   */
  exchange: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * venue time
   *
   * @generated from field: google.protobuf.Timestamp event_ts = 3;
   */
  eventTs?: Timestamp;

  /**
   * pipeline ingest time
   *
   * @generated from field: google.protobuf.Timestamp ingest_ts = 4;
   */
  ingestTs?: Timestamp;

  /**
   * optional
   *
   * @generated from field: string trade_id = 5;
   */
  tradeId: string;

  /**
   * aggressor side if known
   *
   * @generated from field: lakehouse.silver.v1.Side side = 6;
   */
  side: Side;

  /**
   * price * 1e8
   *
   * @generated from field: int64 price_e8 = 7;
   */
  priceE8: bigint;

  /**
   * qty * 1e8
   *
   * @generated from field: int64 qty_e8 = 8;
   */
  qtyE8: bigint;

  /**
   * optional sequence
   *
   * @generated from field: int64 sequence = 9;
   */
  sequence: bigint;

  /**
   * optional origin (replay/realtime/archive)
   *
   * @generated from field: lakehouse.silver.v1.Origin origin = 10;
   */
  origin: Origin;
};

/**
 * Describes the message lakehouse.silver.v1.TradeRecord.
 * Use `create(TradeRecordSchema)` to create a new message.
 */
export const TradeRecordSchema: GenMessage<TradeRecord> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 0);

/**
 * Book changes (delta-based)
 *
 * @generated from message lakehouse.silver.v1.BookChangeRecord
 */
export type BookChangeRecord = Message<"lakehouse.silver.v1.BookChangeRecord"> & {
  /**
   * @generated from field: string exchange = 1;
   */
  exchange: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: google.protobuf.Timestamp event_ts = 3;
   */
  eventTs?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ingest_ts = 4;
   */
  ingestTs?: Timestamp;

  /**
   * @generated from field: lakehouse.silver.v1.Side side = 5;
   */
  side: Side;

  /**
   * @generated from field: lakehouse.silver.v1.Action action = 6;
   */
  action: Action;

  /**
   * @generated from field: int64 price_e8 = 7;
   */
  priceE8: bigint;

  /**
   * 0 for delete in some venues
   *
   * @generated from field: int64 qty_e8 = 8;
   */
  qtyE8: bigint;

  /**
   * optional level index
   *
   * @generated from field: int32 level = 9;
   */
  level: number;

  /**
   * optional sequence
   *
   * @generated from field: int64 sequence = 10;
   */
  sequence: bigint;

  /**
   * @generated from field: lakehouse.silver.v1.Origin origin = 11;
   */
  origin: Origin;
};

/**
 * Describes the message lakehouse.silver.v1.BookChangeRecord.
 * Use `create(BookChangeRecordSchema)` to create a new message.
 */
export const BookChangeRecordSchema: GenMessage<BookChangeRecord> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 1);

/**
 * Snapshots (top-N)
 *
 * @generated from message lakehouse.silver.v1.BookSnapshotRecord
 */
export type BookSnapshotRecord = Message<"lakehouse.silver.v1.BookSnapshotRecord"> & {
  /**
   * @generated from field: string exchange = 1;
   */
  exchange: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: google.protobuf.Timestamp event_ts = 3;
   */
  eventTs?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ingest_ts = 4;
   */
  ingestTs?: Timestamp;

  /**
   * @generated from field: uint32 depth = 5;
   */
  depth: number;

  /**
   * @generated from field: repeated lakehouse.silver.v1.BookSnapshotRecord.Level bids = 6;
   */
  bids: BookSnapshotRecord_Level[];

  /**
   * @generated from field: repeated lakehouse.silver.v1.BookSnapshotRecord.Level asks = 7;
   */
  asks: BookSnapshotRecord_Level[];

  /**
   * Optional snapshot metadata when computed
   *
   * @generated from field: uint32 grouping = 8;
   */
  grouping: number;

  /**
   * @generated from field: uint32 interval_ms = 9;
   */
  intervalMs: number;

  /**
   * @generated from field: bool remove_crossed_levels = 10;
   */
  removeCrossedLevels: boolean;

  /**
   * @generated from field: int64 sequence = 11;
   */
  sequence: bigint;

  /**
   * @generated from field: lakehouse.silver.v1.Origin origin = 12;
   */
  origin: Origin;
};

/**
 * Describes the message lakehouse.silver.v1.BookSnapshotRecord.
 * Use `create(BookSnapshotRecordSchema)` to create a new message.
 */
export const BookSnapshotRecordSchema: GenMessage<BookSnapshotRecord> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 2);

/**
 * @generated from message lakehouse.silver.v1.BookSnapshotRecord.Level
 */
export type BookSnapshotRecord_Level = Message<"lakehouse.silver.v1.BookSnapshotRecord.Level"> & {
  /**
   * @generated from field: int64 price_e8 = 1;
   */
  priceE8: bigint;

  /**
   * @generated from field: int64 qty_e8 = 2;
   */
  qtyE8: bigint;
};

/**
 * Describes the message lakehouse.silver.v1.BookSnapshotRecord.Level.
 * Use `create(BookSnapshotRecord_LevelSchema)` to create a new message.
 */
export const BookSnapshotRecord_LevelSchema: GenMessage<BookSnapshotRecord_Level> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 2, 0);

/**
 * Separate grouped snapshot record (optional; BookSnapshotRecord also supports metadata)
 *
 * @generated from message lakehouse.silver.v1.GroupedBookSnapshotRecord
 */
export type GroupedBookSnapshotRecord = Message<"lakehouse.silver.v1.GroupedBookSnapshotRecord"> & {
  /**
   * @generated from field: string exchange = 1;
   */
  exchange: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: google.protobuf.Timestamp event_ts = 3;
   */
  eventTs?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ingest_ts = 4;
   */
  ingestTs?: Timestamp;

  /**
   * @generated from field: uint32 depth = 5;
   */
  depth: number;

  /**
   * @generated from field: repeated lakehouse.silver.v1.GroupedBookSnapshotRecord.Level bids = 6;
   */
  bids: GroupedBookSnapshotRecord_Level[];

  /**
   * @generated from field: repeated lakehouse.silver.v1.GroupedBookSnapshotRecord.Level asks = 7;
   */
  asks: GroupedBookSnapshotRecord_Level[];

  /**
   * @generated from field: uint32 grouping = 8;
   */
  grouping: number;

  /**
   * @generated from field: uint32 interval_ms = 9;
   */
  intervalMs: number;

  /**
   * @generated from field: bool remove_crossed_levels = 10;
   */
  removeCrossedLevels: boolean;

  /**
   * @generated from field: int64 sequence = 11;
   */
  sequence: bigint;

  /**
   * @generated from field: lakehouse.silver.v1.Origin origin = 12;
   */
  origin: Origin;
};

/**
 * Describes the message lakehouse.silver.v1.GroupedBookSnapshotRecord.
 * Use `create(GroupedBookSnapshotRecordSchema)` to create a new message.
 */
export const GroupedBookSnapshotRecordSchema: GenMessage<GroupedBookSnapshotRecord> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 3);

/**
 * @generated from message lakehouse.silver.v1.GroupedBookSnapshotRecord.Level
 */
export type GroupedBookSnapshotRecord_Level = Message<"lakehouse.silver.v1.GroupedBookSnapshotRecord.Level"> & {
  /**
   * @generated from field: int64 price_e8 = 1;
   */
  priceE8: bigint;

  /**
   * @generated from field: int64 qty_e8 = 2;
   */
  qtyE8: bigint;
};

/**
 * Describes the message lakehouse.silver.v1.GroupedBookSnapshotRecord.Level.
 * Use `create(GroupedBookSnapshotRecord_LevelSchema)` to create a new message.
 */
export const GroupedBookSnapshotRecord_LevelSchema: GenMessage<GroupedBookSnapshotRecord_Level> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 3, 0);

/**
 * Trade bars
 *
 * @generated from message lakehouse.silver.v1.TradeBarRecord
 */
export type TradeBarRecord = Message<"lakehouse.silver.v1.TradeBarRecord"> & {
  /**
   * @generated from field: string exchange = 1;
   */
  exchange: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * bar start
   *
   * @generated from field: google.protobuf.Timestamp event_ts = 3;
   */
  eventTs?: Timestamp;

  /**
   * bar end
   *
   * @generated from field: google.protobuf.Timestamp end_ts = 4;
   */
  endTs?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ingest_ts = 5;
   */
  ingestTs?: Timestamp;

  /**
   * @generated from field: lakehouse.silver.v1.BarKind kind = 6;
   */
  kind: BarKind;

  /**
   * number of units (ticks/volume/time input)
   *
   * @generated from field: uint64 interval = 7;
   */
  interval: bigint;

  /**
   * materialized ms interval (0 for non-time bars)
   *
   * @generated from field: uint32 interval_ms = 8;
   */
  intervalMs: number;

  /**
   * @generated from field: int64 open_e8 = 9;
   */
  openE8: bigint;

  /**
   * @generated from field: int64 high_e8 = 10;
   */
  highE8: bigint;

  /**
   * @generated from field: int64 low_e8 = 11;
   */
  lowE8: bigint;

  /**
   * @generated from field: int64 close_e8 = 12;
   */
  closeE8: bigint;

  /**
   * @generated from field: int64 volume_e8 = 13;
   */
  volumeE8: bigint;

  /**
   * @generated from field: uint64 trade_count = 14;
   */
  tradeCount: bigint;

  /**
   * @generated from field: lakehouse.silver.v1.Origin origin = 15;
   */
  origin: Origin;
};

/**
 * Describes the message lakehouse.silver.v1.TradeBarRecord.
 * Use `create(TradeBarRecordSchema)` to create a new message.
 */
export const TradeBarRecordSchema: GenMessage<TradeBarRecord> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 4);

/**
 * Quote
 *
 * @generated from message lakehouse.silver.v1.QuoteRecord
 */
export type QuoteRecord = Message<"lakehouse.silver.v1.QuoteRecord"> & {
  /**
   * @generated from field: string exchange = 1;
   */
  exchange: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: google.protobuf.Timestamp event_ts = 3;
   */
  eventTs?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ingest_ts = 4;
   */
  ingestTs?: Timestamp;

  /**
   * @generated from field: int64 bid_price_e8 = 5;
   */
  bidPriceE8: bigint;

  /**
   * @generated from field: int64 bid_qty_e8 = 6;
   */
  bidQtyE8: bigint;

  /**
   * @generated from field: int64 ask_price_e8 = 7;
   */
  askPriceE8: bigint;

  /**
   * @generated from field: int64 ask_qty_e8 = 8;
   */
  askQtyE8: bigint;

  /**
   * @generated from field: lakehouse.silver.v1.Origin origin = 9;
   */
  origin: Origin;
};

/**
 * Describes the message lakehouse.silver.v1.QuoteRecord.
 * Use `create(QuoteRecordSchema)` to create a new message.
 */
export const QuoteRecordSchema: GenMessage<QuoteRecord> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 5);

/**
 * Derivative ticker
 *
 * @generated from message lakehouse.silver.v1.DerivativeTickerRecord
 */
export type DerivativeTickerRecord = Message<"lakehouse.silver.v1.DerivativeTickerRecord"> & {
  /**
   * @generated from field: string exchange = 1;
   */
  exchange: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: google.protobuf.Timestamp event_ts = 3;
   */
  eventTs?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ingest_ts = 4;
   */
  ingestTs?: Timestamp;

  /**
   * @generated from field: int64 mark_price_e8 = 5;
   */
  markPriceE8: bigint;

  /**
   * @generated from field: int64 index_price_e8 = 6;
   */
  indexPriceE8: bigint;

  /**
   * @generated from field: int64 funding_rate_e9 = 7;
   */
  fundingRateE9: bigint;

  /**
   * @generated from field: lakehouse.silver.v1.Origin origin = 8;
   */
  origin: Origin;
};

/**
 * Describes the message lakehouse.silver.v1.DerivativeTickerRecord.
 * Use `create(DerivativeTickerRecordSchema)` to create a new message.
 */
export const DerivativeTickerRecordSchema: GenMessage<DerivativeTickerRecord> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 6);

/**
 * Liquidation
 *
 * @generated from message lakehouse.silver.v1.LiquidationRecord
 */
export type LiquidationRecord = Message<"lakehouse.silver.v1.LiquidationRecord"> & {
  /**
   * @generated from field: string exchange = 1;
   */
  exchange: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: google.protobuf.Timestamp event_ts = 3;
   */
  eventTs?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ingest_ts = 4;
   */
  ingestTs?: Timestamp;

  /**
   * @generated from field: lakehouse.silver.v1.Side side = 5;
   */
  side: Side;

  /**
   * @generated from field: int64 price_e8 = 6;
   */
  priceE8: bigint;

  /**
   * @generated from field: int64 qty_e8 = 7;
   */
  qtyE8: bigint;

  /**
   * @generated from field: string order_id = 8;
   */
  orderId: string;

  /**
   * @generated from field: lakehouse.silver.v1.Origin origin = 9;
   */
  origin: Origin;
};

/**
 * Describes the message lakehouse.silver.v1.LiquidationRecord.
 * Use `create(LiquidationRecordSchema)` to create a new message.
 */
export const LiquidationRecordSchema: GenMessage<LiquidationRecord> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 7);

/**
 * Option summary
 *
 * @generated from message lakehouse.silver.v1.OptionSummaryRecord
 */
export type OptionSummaryRecord = Message<"lakehouse.silver.v1.OptionSummaryRecord"> & {
  /**
   * @generated from field: string exchange = 1;
   */
  exchange: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: google.protobuf.Timestamp event_ts = 3;
   */
  eventTs?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ingest_ts = 4;
   */
  ingestTs?: Timestamp;

  /**
   * @generated from field: int64 iv_e6 = 5;
   */
  ivE6: bigint;

  /**
   * @generated from field: int64 delta_e9 = 6;
   */
  deltaE9: bigint;

  /**
   * @generated from field: int64 gamma_e9 = 7;
   */
  gammaE9: bigint;

  /**
   * @generated from field: int64 theta_e9 = 8;
   */
  thetaE9: bigint;

  /**
   * @generated from field: int64 vega_e9 = 9;
   */
  vegaE9: bigint;

  /**
   * @generated from field: int64 oi = 10;
   */
  oi: bigint;

  /**
   * @generated from field: lakehouse.silver.v1.Origin origin = 11;
   */
  origin: Origin;
};

/**
 * Describes the message lakehouse.silver.v1.OptionSummaryRecord.
 * Use `create(OptionSummaryRecordSchema)` to create a new message.
 */
export const OptionSummaryRecordSchema: GenMessage<OptionSummaryRecord> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 8);

/**
 * Book ticker (top-of-book summary)
 *
 * @generated from message lakehouse.silver.v1.BookTickerRecord
 */
export type BookTickerRecord = Message<"lakehouse.silver.v1.BookTickerRecord"> & {
  /**
   * @generated from field: string exchange = 1;
   */
  exchange: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: google.protobuf.Timestamp event_ts = 3;
   */
  eventTs?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ingest_ts = 4;
   */
  ingestTs?: Timestamp;

  /**
   * @generated from field: int64 best_bid_price_e8 = 5;
   */
  bestBidPriceE8: bigint;

  /**
   * @generated from field: int64 best_bid_qty_e8 = 6;
   */
  bestBidQtyE8: bigint;

  /**
   * @generated from field: int64 best_ask_price_e8 = 7;
   */
  bestAskPriceE8: bigint;

  /**
   * @generated from field: int64 best_ask_qty_e8 = 8;
   */
  bestAskQtyE8: bigint;

  /**
   * @generated from field: lakehouse.silver.v1.Origin origin = 9;
   */
  origin: Origin;
};

/**
 * Describes the message lakehouse.silver.v1.BookTickerRecord.
 * Use `create(BookTickerRecordSchema)` to create a new message.
 */
export const BookTickerRecordSchema: GenMessage<BookTickerRecord> = /*@__PURE__*/
  messageDesc(file_lakehouse_silver_v1_records, 9);

/**
 * @generated from enum lakehouse.silver.v1.Side
 */
export enum Side {
  /**
   * @generated from enum value: SIDE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SIDE_BUY = 1;
   */
  BUY = 1,

  /**
   * @generated from enum value: SIDE_SELL = 2;
   */
  SELL = 2,
}

/**
 * Describes the enum lakehouse.silver.v1.Side.
 */
export const SideSchema: GenEnum<Side> = /*@__PURE__*/
  enumDesc(file_lakehouse_silver_v1_records, 0);

/**
 * @generated from enum lakehouse.silver.v1.Action
 */
export enum Action {
  /**
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACTION_UPSERT = 1;
   */
  UPSERT = 1,

  /**
   * @generated from enum value: ACTION_DELETE = 2;
   */
  DELETE = 2,
}

/**
 * Describes the enum lakehouse.silver.v1.Action.
 */
export const ActionSchema: GenEnum<Action> = /*@__PURE__*/
  enumDesc(file_lakehouse_silver_v1_records, 1);

/**
 * @generated from enum lakehouse.silver.v1.BarKind
 */
export enum BarKind {
  /**
   * @generated from enum value: BAR_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BAR_KIND_TICK = 1;
   */
  TICK = 1,

  /**
   * @generated from enum value: BAR_KIND_TIME = 2;
   */
  TIME = 2,

  /**
   * @generated from enum value: BAR_KIND_VOLUME = 3;
   */
  VOLUME = 3,
}

/**
 * Describes the enum lakehouse.silver.v1.BarKind.
 */
export const BarKindSchema: GenEnum<BarKind> = /*@__PURE__*/
  enumDesc(file_lakehouse_silver_v1_records, 2);

/**
 * Mirror Bronze Origin enum for silver layer
 *
 * @generated from enum lakehouse.silver.v1.Origin
 */
export enum Origin {
  /**
   * @generated from enum value: ORIGIN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORIGIN_REALTIME = 1;
   */
  REALTIME = 1,

  /**
   * @generated from enum value: ORIGIN_REPLAY = 2;
   */
  REPLAY = 2,

  /**
   * @generated from enum value: ORIGIN_ARCHIVE = 3;
   */
  ARCHIVE = 3,
}

/**
 * Describes the enum lakehouse.silver.v1.Origin.
 */
export const OriginSchema: GenEnum<Origin> = /*@__PURE__*/
  enumDesc(file_lakehouse_silver_v1_records, 3);

